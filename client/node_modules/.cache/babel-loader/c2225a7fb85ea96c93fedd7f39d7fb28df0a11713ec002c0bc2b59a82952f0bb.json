{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, FILTER_CONTACT, CLEAR_CONTACTS, CLEAR_FILTER, UPDATE_CONTACT, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact)\n      };\n    case FILTER_CONTACT:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n    case CLEAR_CONTACTS:\n      return {\n        contacts: null,\n        filtered: null,\n        current: null,\n        error: null\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n});","map":{"version":3,"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","FILTER_CONTACT","CLEAR_CONTACTS","CLEAR_FILTER","UPDATE_CONTACT","CONTACT_ERROR","state","action","type","contacts","payload","loading","filter","contact","_id","current","map","filtered","regex","RegExp","name","match","email","error"],"sources":["/home/babak/contact-keeper/client/src/context/contact/contactReducer.js"],"sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  FILTER_CONTACT,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  UPDATE_CONTACT,\n  CONTACT_ERROR,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact._id !== action.payload\n        ),\n        loading: false,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n      };\n    case FILTER_CONTACT:\n      return {\n        ...state,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    case CLEAR_CONTACTS:\n      return {\n        contacts: null,\n        filtered: null,\n        current: null,\n        error: null,\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,YAAY,EACZC,cAAc,EACdC,aAAa,QACR,UAAU;AAEjB,gBAAe,CAACC,KAAK,EAAEC,MAAM,KAAK;EAChC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKZ,YAAY;MACf,OAAO;QACL,GAAGU,KAAK;QACRG,QAAQ,EAAEF,MAAM,CAACG,OAAO;QACxBC,OAAO,EAAE;MACX,CAAC;IACH,KAAKd,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRG,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACG,QAAQ,CAAC;QAC7CE,OAAO,EAAE;MACX,CAAC;IACH,KAAKb,cAAc;MACjB,OAAO;QACL,GAAGQ,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACG,MAAM,CAC5BC,OAAO,IAAKA,OAAO,CAACC,GAAG,KAAKP,MAAM,CAACG,OACtC,CAAC;QACDC,OAAO,EAAE;MACX,CAAC;IACH,KAAKZ,WAAW;MACd,OAAO;QACL,GAAGO,KAAK;QACRS,OAAO,EAAER,MAAM,CAACG;MAClB,CAAC;IACH,KAAKV,aAAa;MAChB,OAAO;QACL,GAAGM,KAAK;QACRS,OAAO,EAAE;MACX,CAAC;IACH,KAAKX,cAAc;MACjB,OAAO;QACL,GAAGE,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACO,GAAG,CAAEH,OAAO,IACnCA,OAAO,CAACC,GAAG,KAAKP,MAAM,CAACG,OAAO,CAACI,GAAG,GAAGP,MAAM,CAACG,OAAO,GAAGG,OACxD;MACF,CAAC;IACH,KAAKZ,cAAc;MACjB,OAAO;QACL,GAAGK,KAAK;QACRW,QAAQ,EAAEX,KAAK,CAACG,QAAQ,CAACG,MAAM,CAAEC,OAAO,IAAK;UAC3C,MAAMK,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEZ,MAAM,CAACG,OAAQ,EAAC,EAAE,IAAI,CAAC;UACnD,OAAOG,OAAO,CAACO,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,IAAIL,OAAO,CAACS,KAAK,CAACD,KAAK,CAACH,KAAK,CAAC;QAChE,CAAC;MACH,CAAC;IACH,KAAKhB,cAAc;MACjB,OAAO;QACLO,QAAQ,EAAE,IAAI;QACdQ,QAAQ,EAAE,IAAI;QACdF,OAAO,EAAE,IAAI;QACbQ,KAAK,EAAE;MACT,CAAC;IACH,KAAKpB,YAAY;MACf,OAAO;QACL,GAAGG,KAAK;QACRW,QAAQ,EAAE;MACZ,CAAC;IACH,KAAKZ,aAAa;MAChB,OAAO;QACL,GAAGC,KAAK;QACRiB,KAAK,EAAEhB,MAAM,CAACG;MAChB,CAAC;IACH;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}